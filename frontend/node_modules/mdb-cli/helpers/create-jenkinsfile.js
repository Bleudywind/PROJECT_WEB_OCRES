'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var fs = require('fs');

var path = require('path');

module.exports = {
  createJenkinsfile: function createJenkinsfile(cwd) {
    return _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      var arvJenkinsfile, jqJenkinsfile, jenkinsfilePath, helpers, packageJsonPath, packageJson;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              arvJenkinsfile = "pipeline {\n    agent {\n        docker {\n            image 'node:10'\n            args '-u root:root'\n            reuseNode true\n        }\n    }\n    stages {\n        stage('Tests') {\n            steps {\n                sh 'npm i'\n                sh 'npm test'\n            }\n        }\n    }\n}";
              jqJenkinsfile = "pipeline {\n    agent any\n    stages {\n        stage('No-op') {\n            steps {\n                echo 'Doing nothing..'\n            }\n        }\n    }\n}";
              jenkinsfilePath = path.join(cwd, 'Jenkinsfile');

              if (!fs.existsSync(jenkinsfilePath)) {
                _context.next = 5;
                break;
              }

              return _context.abrupt("return", false);

            case 5:
              helpers = require('../helpers');
              packageJsonPath = path.join(cwd, 'package.json');
              _context.prev = 7;
              _context.next = 10;
              return helpers.deserializeJsonFile(packageJsonPath);

            case 10:
              packageJson = _context.sent;
              _context.next = 16;
              break;

            case 13:
              _context.prev = 13;
              _context.t0 = _context["catch"](7);
              packageJson = {};

            case 16:
              if (packageJson.dependencies && packageJson.scripts && packageJson.scripts.test) {
                fs.writeFileSync(jenkinsfilePath, arvJenkinsfile, 'utf8');
              } else {
                fs.writeFileSync(jenkinsfilePath, jqJenkinsfile, 'utf8');
              }

              return _context.abrupt("return", true);

            case 18:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[7, 13]]);
    }))();
  }
};