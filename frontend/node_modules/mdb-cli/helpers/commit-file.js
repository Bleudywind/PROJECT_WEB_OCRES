'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var childProcess = require('child_process');

var CliStatus = require('../models/cli-status');

module.exports = {
  commitFile: function commitFile(filename, message) {
    var isWindows = process.platform === 'win32';
    return new Promise(function (resolve, reject) {
      var gitAdd = childProcess.spawn('git', ['add', filename], _objectSpread({
        stdio: 'inherit'
      }, isWindows && {
        shell: true
      }));
      gitAdd.on('exit', function (code) {
        if (code === CliStatus.SUCCESS) {
          var commitMsg = isWindows ? "\"".concat(message, "\"") : message;
          var gitCommit = childProcess.spawn('git', ['commit', '-m', commitMsg], _objectSpread({
            stdio: 'inherit'
          }, isWindows && {
            shell: true
          }));
          gitCommit.on('exit', function (code) {
            return code === CliStatus.SUCCESS ? resolve() : reject(code);
          });
        } else {
          reject(code);
        }
      });
    });
  }
};