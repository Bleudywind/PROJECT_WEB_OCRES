'use strict';

var HttpWrapper = require('../utils/http-wrapper');

var CliStatus = require('../models/cli-status');

var ProgressBar = require('progress');

var _require = require('stream'),
    Readable = _require.Readable;

var config = require('../config');

var unzip = require('unzipper');

module.exports = {
  downloadUserProject: function downloadUserProject(projectName, headers, destination, force) {
    return new Promise(function (resolve, reject) {
      var query = force ? '?force=true' : '';
      var http = new HttpWrapper({
        port: config.port,
        hostname: config.host,
        path: "/project/get/".concat(projectName).concat(query),
        method: 'GET',
        data: '',
        headers: headers
      });
      var request = http.createRequest(function (response) {
        var result,
            message = '';
        var readStream = new Readable();

        readStream._read = function () {};

        var len = Number(response.headers['content-length']);
        var bar = new ProgressBar('[:bar] :eta s', {
          complete: '=',
          incomplete: ' ',
          width: 100,
          total: len
        });
        response.on('data', function (chunk) {
          if (response.statusCode === CliStatus.HTTP_SUCCESS) {
            readStream.push(chunk);
            bar.tick(chunk.length);
          } else {
            message += Buffer.from(chunk).toString('utf8');
          }
        });
        response.on('end', function () {
          var statusCode = response.statusCode,
              statusMessage = response.statusMessage;

          if (statusCode === CliStatus.HTTP_SUCCESS) {
            result = [{
              'Status': CliStatus.SUCCESS,
              'Message': 'Download completed.'
            }];
            readStream.push(null);
            console.log('\n');
          } else {
            reject({
              'Status': statusCode,
              'Message': message || statusMessage
            });
          }
        });

        try {
          readStream.pipe(unzip.Extract({
            path: destination
          })).on('close', function () {
            return resolve(result);
          });
        } catch (e) {
          reject({
            'Status': CliStatus.INTERNAL_SERVER_ERROR,
            'Message': 'Error downloading your project'
          });
        }
      });
      request.on('error', reject);
      request.end();
    });
  }
};