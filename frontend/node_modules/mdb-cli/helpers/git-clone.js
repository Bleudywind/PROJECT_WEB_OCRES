'use strict';

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CliStatus = require('../models/cli-status');

module.exports = {
  gitClone: function gitClone(repoUrl) {
    var projectName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
    return new Promise(function (resolve, reject) {
      var gitArgs = projectName ? ['clone', repoUrl, projectName] : ['clone', repoUrl];
      var isWindows = process.platform === 'win32';

      var _require = require('child_process'),
          spawn = _require.spawn;

      var gitClone = spawn('git', gitArgs, _objectSpread({}, isWindows && {
        shell: true
      }));
      gitClone.stdout.on('data', function (data) {
        console.log(Buffer.from(data).toString());
      });
      gitClone.stderr.on('data', function (error) {
        console.log(Buffer.from(error).toString());
      });
      gitClone.on('error', reject);
      gitClone.on('exit', function (code) {
        var result = [{
          'Status': code
        }];

        if (code === CliStatus.SUCCESS) {
          result[0].Message = 'Success.';
          resolve(result);
        } else {
          result[0].Message = 'There were some errors. Please try again.';
          reject(result);
        }
      });
    });
  }
};