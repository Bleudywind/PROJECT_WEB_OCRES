'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var fs = require('fs');

var path = require('path');

var CliStatus = require('../models/cli-status');

module.exports = {
  createPackageJson: function createPackageJson(packageManager, directoryPath) {
    var packageJsonPath = path.join(directoryPath, 'package.json');
    var successStatus = {
      'Status': CliStatus.SUCCESS,
      'Message': 'package.json created.'
    };
    return new Promise(function (resolve, reject) {
      fs.exists(packageJsonPath, function (err) {
        if (err) {
          resolve(successStatus);
        } else {
          var _require = require('./show-confirmation-prompt'),
              showConfirmationPrompt = _require.showConfirmationPrompt;

          showConfirmationPrompt('Missing package.json file. Create?').then( /*#__PURE__*/function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(confirmed) {
              var loadPackageManager, init;
              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      if (!confirmed) {
                        _context.next = 11;
                        break;
                      }

                      if (!(packageManager === null)) {
                        _context.next = 6;
                        break;
                      }

                      loadPackageManager = require('../utils/managers/load-package-manager');
                      _context.next = 5;
                      return loadPackageManager();

                    case 5:
                      packageManager = _context.sent;

                    case 6:
                      init = packageManager.init(directoryPath);
                      init.on('error', function (error) {
                        return reject(error);
                      });
                      init.on('exit', function (code) {
                        return code === CliStatus.SUCCESS ? resolve(successStatus) : reject({
                          'Status': code,
                          'Message': 'Problem with project initialization'
                        });
                      });
                      _context.next = 12;
                      break;

                    case 11:
                      reject({
                        'Status': CliStatus.ERROR,
                        'Message': 'package.json not created.'
                      });

                    case 12:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }));

            return function (_x) {
              return _ref.apply(this, arguments);
            };
          }());
        }
      });
    });
  }
};