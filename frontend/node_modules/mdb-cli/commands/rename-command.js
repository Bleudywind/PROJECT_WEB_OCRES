'use strict';

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Command = require('./command');

var AuthHandler = require('../utils/auth-handler');

var SetNameHandler = require('../utils/set-name-handler');

var PublishHandler = require('../utils/publish-handler');

var RenameHandler = require('../utils/rename-handler');

var CliStatus = require('../models/cli-status');

var RenameCommand = /*#__PURE__*/function (_Command) {
  _inherits(RenameCommand, _Command);

  var _super = _createSuper(RenameCommand);

  function RenameCommand() {
    var _this;

    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler();

    _classCallCheck(this, RenameCommand);

    _this = _super.call(this, authHandler);
    _this.setNameHandler = new SetNameHandler(authHandler);
    _this.publishHandler = new PublishHandler(authHandler);
    _this.handler = new RenameHandler(authHandler);
    return _this;
  }

  _createClass(RenameCommand, [{
    key: "execute",
    value: function execute() {
      var _this2 = this;

      this.setNameHandler.setArgs(this.args);
      return this.setNameHandler.askForNewProjectName().then(function () {
        return _this2.setNameHandler.setName();
      }).then(function () {
        return _this2.setHandlerArgs();
      }).then(function () {
        return _this2.handler.fetchProjects();
      }).then(function () {
        return _this2.handler.checkProjectStatus();
      }).then(function () {
        return _this2.handler.getBackendTechnology();
      }).then(function () {
        return _this2.setNameHandler.removeProject();
      }).then(function () {
        return _this2.publishHandler.setProjectName();
      }).then(function () {
        return _this2.setBackendTechnology();
      }).then(function () {
        return _this2.publishHandler.publish();
      }).then(function () {
        return _this2.printResult();
      })["catch"](function (e) {
        _this2.catchError(e, false);

        _this2.revertNameChange();
      });
    }
  }, {
    key: "revertNameChange",
    value: function revertNameChange() {
      var _this3 = this;

      var _this$setNameHandler$ = this.setNameHandler.getResult(),
          _this$setNameHandler$2 = _slicedToArray(_this$setNameHandler$, 1),
          setNameResult = _this$setNameHandler$2[0];

      if (setNameResult && setNameResult.Status === CliStatus.SUCCESS && setNameResult.Message.includes('from' && 'to')) {
        this.setNameHandler.newName = this.setNameHandler.oldName;
        this.setNameHandler.setName().then(function () {
          _this3.setNameHandler.result = [];

          _this3.result.push({
            'Status': CliStatus.SUCCESS,
            'Message': 'Project name has been successfully recovered'
          });

          _this3.printResult();
        })["catch"](this.catchError);
      } else {
        this.printResult();
      }
    }
  }, {
    key: "setHandlerArgs",
    value: function () {
      var _setHandlerArgs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.handler.oldName = this.setNameHandler.oldName;
                this.handler.newName = this.setNameHandler.newName;

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function setHandlerArgs() {
        return _setHandlerArgs.apply(this, arguments);
      }

      return setHandlerArgs;
    }()
  }, {
    key: "setBackendTechnology",
    value: function () {
      var _setBackendTechnology = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (this.handler.backend) {
                  this.publishHandler.backendTechnology = this.handler.technology;
                }

              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function setBackendTechnology() {
        return _setBackendTechnology.apply(this, arguments);
      }

      return setBackendTechnology;
    }()
  }, {
    key: "printResult",
    value: function printResult() {
      this.result = [].concat(_toConsumableArray(this.setNameHandler.getResult()), _toConsumableArray(this.publishHandler.getResult()), _toConsumableArray(this.result));
      this.print();
    }
  }]);

  return RenameCommand;
}(Command);

module.exports = RenameCommand;