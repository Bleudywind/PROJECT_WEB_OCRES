'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AuthHandler = require('./auth-handler');

var HttpWrapper = require('../utils/http-wrapper');

var _require = require('../helpers/parse-args'),
    parseArgs = _require.parseArgs;

var _loadPackageManager = require('./managers/load-package-manager');

var CliStatus = require('../models/cli-status');

var helpers = require('../helpers');

var config = require('../config');

var inquirer = require('inquirer');

var path = require('path');

var fs = require('fs');

var INIT_ARGS_MAP = {
  '-n': 'projectName',
  '--name': 'projectName'
};

var InitHandler = /*#__PURE__*/function () {
  function InitHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler();

    _classCallCheck(this, InitHandler);

    this.result = [];
    this.options = [];
    this.cwd = process.cwd();
    this.projectSlug = '';
    this.projectName = '';
    this.projectRoot = '';
    this.authHeaders = {};
    this._promptShownCount = 0;
    this.authHandler = authHandler;
    this.args = {
      projectName: '',
      blank: false
    };
    this.isFreePackage = true;
    this.packageManager = null;
    this.setAuthHeader();
  }

  _createClass(InitHandler, [{
    key: "setArgs",
    value: function setArgs(args) {
      var _this = this;

      var flags = ['-b', '--blank'];
      flags.forEach(function (flag) {
        if (args.includes(flag)) {
          args.splice(args.indexOf(flag), 1);
          _this.args.blank = true;
        }
      });
      this.args = _objectSpread(_objectSpread({}, this.args), parseArgs(args, INIT_ARGS_MAP));
    }
  }, {
    key: "setAuthHeader",
    value: function setAuthHeader() {
      this.result = this.authHandler.result;
      this.authHeaders = this.authHandler.headers;
    }
  }, {
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }, {
    key: "getAvailableOptions",
    value: function getAvailableOptions() {
      var _this2 = this;

      if (this.args.blank) {
        return Promise.resolve();
      }

      return helpers.fetchProducts(this.authHeaders).then(function (orders) {
        orders = typeof orders === 'string' ? JSON.parse(orders) : orders;
        _this2.options = helpers.getSorted(orders, 'productTitle');
      })["catch"](function (error) {
        return Promise.reject(error);
      });
    }
  }, {
    key: "showUserPrompt",
    value: function showUserPrompt() {
      var _this3 = this;

      if (this.args.blank) {
        return Promise.resolve();
      }

      var choices = this.options.map(function (row) {
        return {
          name: row.productTitle,
          "short": row.productSlug,
          value: row.productSlug
        };
      });
      choices.push({
        name: 'Blank project',
        "short": 'blank',
        value: 'blank'
      });
      return inquirer.createPromptModule()([{
        type: 'list',
        name: 'projectSlug',
        message: 'Choose project to initialize',
        choices: choices
      }]).then(function (select) {
        return _this3._handleUserProjectSelect(select);
      });
    }
  }, {
    key: "initProject",
    value: function initProject() {
      var _this4 = this;

      var packageJsonPath = path.join(this.cwd, 'package.json');

      if (fs.existsSync(packageJsonPath)) {
        return helpers.showConfirmationPrompt('There is already an npm project in this location, are you sure you want to init it here?').then(function (confirmed) {
          if (confirmed && _this4.args.blank) return _this4._initEmptyProject();else if (confirmed) return _this4._download();else _this4.result.push({
            Status: CliStatus.SUCCESS,
            Message: 'OK, will not initialize project in this location.'
          });
        });
      } else {
        if (this.args.blank) return this._initEmptyProject();else return this._download();
      }
    }
  }, {
    key: "_initEmptyProject",
    value: function _initEmptyProject() {
      var _this5 = this;

      return this.askForProjectName().then(function () {
        return helpers.eraseProjectDirectories(_this5.projectSlug, _this5.projectName);
      }).then(function () {
        return _this5.createDirectory();
      }).then(function () {
        return _this5.loadPackageManager(_this5.projectRoot);
      }).then(function () {
        return _this5.createPackageJson();
      }).then(function () {
        return _this5.saveMetadata();
      })["catch"](function (err) {
        return _this5.result = [err];
      });
    }
  }, {
    key: "askForProjectName",
    value: function () {
      var _askForProjectName = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.args.projectName) {
                  _context.next = 3;
                  break;
                }

                this.projectName = this.args.projectName;
                return _context.abrupt("return");

              case 3:
                _context.next = 5;
                return helpers.showTextPrompt('Enter project name', 'Project name must not be empty.');

              case 5:
                this.projectName = _context.sent;
                this.projectRoot = path.join(this.cwd, this.projectName);
                _context.next = 9;
                return this._checkProjectNameExists();

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function askForProjectName() {
        return _askForProjectName.apply(this, arguments);
      }

      return askForProjectName;
    }()
  }, {
    key: "createDirectory",
    value: function createDirectory() {
      var _this6 = this;

      return new Promise(function (resolve, reject) {
        fs.mkdir(_this6.projectRoot, function (err) {
          if (err) {
            return reject({
              Status: CliStatus.ERROR,
              Message: "Error: ".concat(err)
            });
          }

          resolve();
        });
      });
    }
  }, {
    key: "loadPackageManager",
    value: function () {
      var _loadPackageManager2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(cwd) {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _loadPackageManager(true, false, cwd);

              case 2:
                this.packageManager = _context2.sent;

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function loadPackageManager(_x) {
        return _loadPackageManager2.apply(this, arguments);
      }

      return loadPackageManager;
    }()
  }, {
    key: "createPackageJson",
    value: function createPackageJson() {
      var _this7 = this;

      return new Promise(function (resolve, reject) {
        var init = _this7.packageManager.init(_this7.projectRoot);

        init.on('error', function (error) {
          return reject({
            Status: CliStatus.ERROR,
            Message: error.message
          });
        });
        init.on('exit', function (code) {
          if (code === CliStatus.SUCCESS) {
            _this7.result.push({
              Status: CliStatus.SUCCESS,
              Message: "Project ".concat(_this7.projectName, " successfully created")
            });

            resolve();
          } else {
            reject({
              Status: code,
              Message: 'Problem with project initialization'
            });
          }
        });
      });
    }
  }, {
    key: "addJenkinsfile",
    value: function addJenkinsfile() {
      return helpers.createJenkinsfile(this.projectRoot);
    }
  }, {
    key: "_download",
    value: function _download() {
      var _this8 = this;

      return helpers.eraseProjectDirectories(this.projectSlug, this.projectName).then(function () {
        return helpers.downloadProStarter(_this8.projectSlug, _this8.authHeaders, _this8.cwd, _this8.projectName);
      }).then(function (result) {
        _this8.result = result;
        return _this8.saveMetadata().then(function () {
          return _this8.notifyServer();
        })["catch"](console.error);
      })["catch"](function (err) {
        return _this8.result = [err];
      });
    }
  }, {
    key: "_handleUserProjectSelect",
    value: function _handleUserProjectSelect(select) {
      if (this._promptShownCount++ >= 10) {
        console.table([{
          'Status': CliStatus.SEE_OTHER,
          'Message': 'Please run `mdb list` to see available packages.'
        }]);
        return process.exit(0);
      }

      var projectSlug = select.projectSlug;

      if (projectSlug === 'blank') {
        this.projectSlug = projectSlug;
        this.args.blank = true;
        return Promise.resolve();
      }

      var project = this.options.find(function (row) {
        return row.productSlug === projectSlug;
      });

      if (!project.available) {
        console.log("You cannot create this project. Please visit https://mdbootstrap.com/products/".concat(project.productSlug, "/ and make sure it is available for you."));
        return this.showUserPrompt();
      }

      this._setProjectInfo(project);

      return this._checkProjectNameExists();
    }
  }, {
    key: "_setProjectInfo",
    value: function _setProjectInfo(project) {
      var productSlug = project.productSlug;
      this.isFreePackage = project.productId === null;
      this.projectSlug = productSlug;
      this.projectName = this.args.projectName ? this.args.projectName : this.projectSlug;
      this.projectRoot = path.join(this.cwd, this.projectName);
    }
  }, {
    key: "_checkProjectNameExists",
    value: function () {
      var _checkProjectNameExists2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var confirmed;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!fs.existsSync(this.projectRoot)) {
                  _context3.next = 11;
                  break;
                }

                _context3.next = 3;
                return helpers.showConfirmationPrompt("Folder ".concat(this.projectName, " already exists, do you want to rename project you are creating now?"), true);

              case 3:
                confirmed = _context3.sent;

                if (!confirmed) {
                  _context3.next = 11;
                  break;
                }

                _context3.next = 7;
                return helpers.showTextPrompt('Enter new project name', 'Project name must not be empty.');

              case 7:
                this.projectName = _context3.sent;
                this.projectRoot = path.join(this.cwd, this.projectName);
                _context3.next = 11;
                return this._checkProjectNameExists();

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function _checkProjectNameExists() {
        return _checkProjectNameExists2.apply(this, arguments);
      }

      return _checkProjectNameExists;
    }()
  }, {
    key: "saveMetadata",
    value: function () {
      var _saveMetadata = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        var metadataPath, metadataFile;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                metadataPath = path.join(this.projectRoot, '.mdb');
                metadataFile = {};
                _context4.prev = 2;
                _context4.next = 5;
                return helpers.deserializeJsonFile(metadataPath);

              case 5:
                metadataFile = _context4.sent;
                _context4.next = 10;
                break;

              case 8:
                _context4.prev = 8;
                _context4.t0 = _context4["catch"](2);

              case 10:
                metadataFile.packageName = this.projectSlug;
                metadataFile.projectName = this.projectName;
                _context4.prev = 12;
                _context4.next = 15;
                return helpers.serializeJsonFile(metadataPath, metadataFile);

              case 15:
                this.result.push({
                  'Status': CliStatus.SUCCESS,
                  'Message': 'Project metadata saved.'
                });
                _context4.next = 21;
                break;

              case 18:
                _context4.prev = 18;
                _context4.t1 = _context4["catch"](12);
                this.result.push({
                  'Status': CliStatus.INTERNAL_SERVER_ERROR,
                  'Message': 'Project metadata not saved.'
                });

              case 21:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[2, 8], [12, 18]]);
      }));

      function saveMetadata() {
        return _saveMetadata.apply(this, arguments);
      }

      return saveMetadata;
    }()
  }, {
    key: "notifyServer",
    value: function notifyServer() {
      var http = new HttpWrapper({
        port: config.port,
        hostname: config.host,
        path: '/packages/initialized',
        data: JSON.stringify({
          'projectName': this.args.projectName || this.projectSlug,
          'packageName': this.projectSlug
        }),
        headers: _objectSpread(_objectSpread({}, this.authHeaders), {}, {
          'Content-Type': 'application/json'
        })
      });
      return http.post();
    }
  }]);

  return InitHandler;
}();

module.exports = InitHandler;