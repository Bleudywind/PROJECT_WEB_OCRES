'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AuthHandler = require('./auth-handler');

var CliStatus = require('../models/cli-status');

var _loadPackageManager = require('./managers/load-package-manager');

var UpdateHandler = /*#__PURE__*/function () {
  function UpdateHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler(false);

    _classCallCheck(this, UpdateHandler);

    this.authHandler = authHandler;
    this.packageManager = null;
    this.result = [];
  }

  _createClass(UpdateHandler, [{
    key: "loadPackageManager",
    value: function () {
      var _loadPackageManager2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _loadPackageManager(false);

              case 2:
                this.packageManager = _context.sent;

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function loadPackageManager() {
        return _loadPackageManager2.apply(this, arguments);
      }

      return loadPackageManager;
    }()
  }, {
    key: "update",
    value: function update() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        var update = _this.packageManager.update();

        update.on('error', reject);
        update.on('exit', function (code) {
          if (code === CliStatus.SUCCESS) {
            _this.result.push({
              Status: code,
              Message: 'Success'
            });

            resolve();
          } else {
            reject({
              Status: code,
              Message: 'There were some errors. Please try again.'
            });
          }
        });
      });
    }
  }, {
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }]);

  return UpdateHandler;
}();

module.exports = UpdateHandler;