'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var PackageManager = /*#__PURE__*/function () {
  function PackageManager() {
    _classCallCheck(this, PackageManager);

    this.isWindows = process.platform === 'win32';
  }

  _createClass(PackageManager, [{
    key: "info",
    value: function info() {
      throw new ReferenceError('Method must be implemented in a child-class');
    }
  }, {
    key: "init",
    value: function init() {
      throw new ReferenceError('Method must be implemented in a child-class');
    }
  }, {
    key: "build",
    value: function build() {
      throw new ReferenceError('Method must be implemented in a child-class');
    }
  }, {
    key: "test",
    value: function test() {
      throw new ReferenceError('Method must be implemented in a child-class');
    }
  }, {
    key: "update",
    value: function update() {
      throw new ReferenceError('Method must be implemented in a child-class');
    }
  }]);

  return PackageManager;
}();

module.exports = PackageManager;