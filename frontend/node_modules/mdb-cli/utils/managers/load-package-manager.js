'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var PackageManagers = require('../../models/package-managers');

var YarnPackageManager = require('./yarn-package-manager');

var NpmPackageManager = require('./npm-package-manager');

var CliStatus = require('../../models/cli-status');

var helpers = require('../../helpers');

var inquirer = require('inquirer');

var path = require('path');

var fs = require('fs');

var getConfigFilePath = function getConfigFilePath(cwd) {
  return path.join(cwd || process.cwd(), '.mdb');
};

var readDefaultManager = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var result;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _context.next = 3;
            return helpers.deserializeJsonFile(getConfigFilePath());

          case 3:
            result = _context.sent;
            _context.next = 11;
            break;

          case 6:
            _context.prev = 6;
            _context.t0 = _context["catch"](0);

            if (!(_context.t0.toString().toLowerCase().indexOf('unexpected token') !== -1)) {
              _context.next = 10;
              break;
            }

            return _context.abrupt("return", Promise.reject({
              Status: CliStatus.CLI_ERROR,
              Message: '.mdb file is invalid. Please remove it and try again.'
            }));

          case 10:
            return _context.abrupt("return", null);

          case 11:
            return _context.abrupt("return", result.packageManager);

          case 12:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[0, 6]]);
  }));

  return function readDefaultManager() {
    return _ref.apply(this, arguments);
  };
}();

var saveDefaultManager = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(value, commit, cwd) {
    var configFile, content;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.prev = 0;
            configFile = getConfigFilePath(cwd);

            if (!fs.existsSync(configFile)) {
              _context2.next = 14;
              break;
            }

            _context2.next = 5;
            return helpers.deserializeJsonFile(configFile);

          case 5:
            content = _context2.sent;
            content.packageManager = value;
            _context2.next = 9;
            return helpers.serializeJsonFile(configFile, content);

          case 9:
            if (!commit) {
              _context2.next = 12;
              break;
            }

            _context2.next = 12;
            return helpers.commitFile('.mdb', 'Add settings to .mdb config file');

          case 12:
            _context2.next = 16;
            break;

          case 14:
            _context2.next = 16;
            return helpers.saveMdbConfig(configFile, JSON.stringify({
              packageManager: value
            }), commit);

          case 16:
            _context2.next = 21;
            break;

          case 18:
            _context2.prev = 18;
            _context2.t0 = _context2["catch"](0);
            console.error(_context2.t0);

          case 21:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, null, [[0, 18]]);
  }));

  return function saveDefaultManager(_x, _x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();

var selectPackageManager = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
    var choices, result;
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            choices = [PackageManagers.NPM, PackageManagers.YARN];
            _context3.next = 3;
            return inquirer.createPromptModule()([{
              type: 'list',
              name: 'name',
              message: 'Which package manager do you use?',
              choices: choices
            }]);

          case 3:
            result = _context3.sent;
            return _context3.abrupt("return", result.name);

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  }));

  return function selectPackageManager() {
    return _ref3.apply(this, arguments);
  };
}();

var loadPackageManager = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
    var save,
        commit,
        cwd,
        manager,
        _args4 = arguments;
    return regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            save = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : true;
            commit = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : false;
            cwd = _args4.length > 2 ? _args4[2] : undefined;
            _context4.next = 5;
            return readDefaultManager();

          case 5:
            manager = _context4.sent;

            if (manager) {
              _context4.next = 13;
              break;
            }

            _context4.next = 9;
            return selectPackageManager();

          case 9:
            manager = _context4.sent;

            if (!save) {
              _context4.next = 13;
              break;
            }

            _context4.next = 13;
            return saveDefaultManager(manager, commit, cwd);

          case 13:
            _context4.t0 = manager;
            _context4.next = _context4.t0 === 'npm' ? 16 : _context4.t0 === 'yarn' ? 17 : 18;
            break;

          case 16:
            return _context4.abrupt("return", new NpmPackageManager());

          case 17:
            return _context4.abrupt("return", new YarnPackageManager());

          case 18:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));

  return function loadPackageManager() {
    return _ref4.apply(this, arguments);
  };
}();

module.exports = loadPackageManager;