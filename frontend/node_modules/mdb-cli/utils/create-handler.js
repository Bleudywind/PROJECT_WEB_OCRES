'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var config = require('../config');

var AuthHandler = require('./auth-handler');

var HttpWrapper = require('../utils/http-wrapper');

var CliStatus = require('../models/cli-status');

var childProcess = require('child_process');

var helpers = require('../helpers');

var path = require('path');

var fs = require('fs');

var CreateHandler = /*#__PURE__*/function () {
  function CreateHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler();

    _classCallCheck(this, CreateHandler);

    this.result = [];
    this.name = '';
    this.cwd = process.cwd();
    this.authHandler = authHandler;
    this.gitlabUrl = '';
    this.options = {
      port: config.port,
      hostname: config.host,
      path: '/project/create',
      method: 'POST',
      data: '',
      headers: _objectSpread(_objectSpread({}, this.authHandler.headers), {}, {
        'Content-Type': 'application/json'
      })
    };
  }

  _createClass(CreateHandler, [{
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }, {
    key: "getProjectName",
    value: function () {
      var _getProjectName = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var fileName, fileContent;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                fileName = 'package.json';
                _context.next = 3;
                return helpers.createPackageJson(null, this.cwd);

              case 3:
                _context.prev = 3;
                _context.next = 6;
                return helpers.deserializeJsonFile(fileName);

              case 6:
                fileContent = _context.sent;
                this.name = fileContent.name;
                _context.next = 14;
                break;

              case 10:
                _context.prev = 10;
                _context.t0 = _context["catch"](3);
                console.log(_context.t0);
                return _context.abrupt("return", Promise.reject([{
                  'Status': CliStatus.ERROR,
                  'Message': "Problem with reading ".concat(fileName)
                }]));

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[3, 10]]);
      }));

      function getProjectName() {
        return _getProjectName.apply(this, arguments);
      }

      return getProjectName;
    }()
  }, {
    key: "addJenkinsfile",
    value: function addJenkinsfile() {
      return helpers.createJenkinsfile(this.cwd);
    }
  }, {
    key: "create",
    value: function create() {
      var _this = this;

      this.options.data = {
        projectName: this.name
      };
      var http = new HttpWrapper(this.options);
      return http.post().then(function (result) {
        result = typeof result === 'string' ? JSON.parse(result) : result;
        var _result = result,
            name = _result.name,
            url = _result.url,
            webhook = _result.webhook,
            saved = _result.saved,
            pipeline = _result.pipeline;
        _this.gitlabUrl = url;
        if (webhook === false) _this.result.push({
          Status: CliStatus.ERROR,
          Message: 'Gitlab webhook not added. Please write to our support https://mdbootstrap.com/support/'
        });
        if (saved === false) _this.result.push({
          Status: CliStatus.ERROR,
          Message: 'Project data not saved. Please write to our support https://mdbootstrap.com/support/'
        });
        if (pipeline === false) _this.result.push({
          Status: CliStatus.ERROR,
          Message: 'Jenkins pipeline not created. Please write to our support https://mdbootstrap.com/support/'
        });

        _this.result.push({
          Status: CliStatus.HTTP_SUCCESS,
          Message: "Project ".concat(name, " successfully created. Repository url: ").concat(url, " ")
        });
      });
    }
  }, {
    key: "pushToGitlab",
    value: function pushToGitlab() {
      var _this2 = this;

      var gitConfigPath = path.join(this.cwd, '.git', 'config');
      return new Promise(function (resolve, reject) {
        if (fs.existsSync(gitConfigPath)) {
          childProcess.exec("git remote set-url origin ".concat(_this2.gitlabUrl, " && git push -u origin master"), function (err) {
            if (err && err.message && err.message.toLowerCase().indexOf('authentication failed') !== -1) {
              console.log('\n\x1b[31m%s\x1b[0m', 'Note:', 'There were some authentication problems. Please make sure you provided correct username and password. If you are certain that the credentials are correct and still see this message, please log into your MDB Go GitLab account to activate it here: https://git.mdbgo.com/. Once you do that run the following command:\n');
              console.log('\x1b[36m%s\x1b[0m', '\tgit push -u origin master\n\n');
              return resolve();
            } else if (err) {
              return reject(err.message);
            }

            resolve();
          });
        } else {
          childProcess.exec("git init && git remote add origin ".concat(_this2.gitlabUrl, " && git add . && git commit -m \"Initial commit\" && git push -u origin master"), function (err) {
            if (err && err.message && err.message.toLowerCase().indexOf('authentication failed') !== -1) {
              console.log('\n\x1b[31m%s\x1b[0m', 'Note:', 'There were some authentication problems. Please make sure you provided correct username and password. If you are certain that the credentials are correct and still see this message, please log into your MDB Go GitLab account to activate it here: https://git.mdbgo.com/. Once you do that run the following command:\n');
              console.log('\x1b[36m%s\x1b[0m', '\tgit push -u origin master\n\n');
              return resolve();
            } else if (err) {
              return reject(err.message);
            }

            resolve();
          });
        }
      });
    }
  }]);

  return CreateHandler;
}();

module.exports = CreateHandler;