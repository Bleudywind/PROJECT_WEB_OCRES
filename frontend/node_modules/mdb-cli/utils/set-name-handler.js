'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var fs = require('fs');

var path = require('path');

var config = require('../config');

var HttpWrapper = require('../utils/http-wrapper');

var AuthHandler = require('./auth-handler');

var CliStatus = require('../models/cli-status');

var helpers = require('../helpers');

var _loadPackageManager = require('./managers/load-package-manager');

var SetNameHandler = /*#__PURE__*/function () {
  function SetNameHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler();

    _classCallCheck(this, SetNameHandler);

    this.result = [];
    this.cwd = process.cwd();
    this.newName = '';
    this.oldName = '';
    this.packageManager = null;
    this.args = [];
    this.authHandler = authHandler;
  }

  _createClass(SetNameHandler, [{
    key: "setArgs",
    value: function setArgs(args) {
      this.args = args;
    }
  }, {
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }, {
    key: "loadPackageManager",
    value: function () {
      var _loadPackageManager2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var gitPath;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                gitPath = path.join(this.cwd, '.git');
                _context.next = 3;
                return _loadPackageManager(true, fs.existsSync(gitPath));

              case 3:
                this.packageManager = _context.sent;

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function loadPackageManager() {
        return _loadPackageManager2.apply(this, arguments);
      }

      return loadPackageManager;
    }()
  }, {
    key: "askForNewProjectName",
    value: function () {
      var _askForNewProjectName = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(this.args.length > 0)) {
                  _context2.next = 3;
                  break;
                }

                this.newName = this.args[0];
                return _context2.abrupt("return");

              case 3:
                _context2.next = 5;
                return helpers.showTextPrompt('Enter new project name', 'Project name must not be empty.');

              case 5:
                this.newName = _context2.sent;

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function askForNewProjectName() {
        return _askForNewProjectName.apply(this, arguments);
      }

      return askForNewProjectName;
    }()
  }, {
    key: "setName",
    value: function () {
      var _setName = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var packageJsonPath, packageJson, indexPhpPath;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                packageJsonPath = path.join(this.cwd, 'package.json');
                packageJson = {};
                _context3.prev = 2;
                _context3.next = 5;
                return helpers.deserializeJsonFile(packageJsonPath);

              case 5:
                packageJson = _context3.sent;
                this.oldName = packageJson.name;

                if (!(this.newName === this.oldName)) {
                  _context3.next = 10;
                  break;
                }

                this.result = [{
                  'Status': CliStatus.SUCCESS,
                  'Message': 'Project names are the same.'
                }];
                return _context3.abrupt("return", Promise.reject(this.result));

              case 10:
                packageJson.name = this.newName;
                _context3.next = 21;
                break;

              case 13:
                _context3.prev = 13;
                _context3.t0 = _context3["catch"](2);

                if (!(_context3.t0.code === 'ENOENT')) {
                  _context3.next = 20;
                  break;
                }

                indexPhpPath = path.join(this.cwd, 'index.php');

                if (!fs.existsSync(indexPhpPath)) {
                  _context3.next = 19;
                  break;
                }

                return _context3.abrupt("return", this.saveInConfigFile());

              case 19:
                return _context3.abrupt("return", this.handleMissingPackageJson());

              case 20:
                return _context3.abrupt("return", Promise.reject([{
                  Status: CliStatus.CLI_ERROR,
                  Message: 'Problem with `package.json` file deserialization.'
                }]));

              case 21:
                _context3.prev = 21;
                _context3.next = 24;
                return helpers.serializeJsonFile(packageJsonPath, packageJson);

              case 24:
                _context3.next = 30;
                break;

              case 26:
                _context3.prev = 26;
                _context3.t1 = _context3["catch"](21);
                this.result = [{
                  'Status': CliStatus.INTERNAL_SERVER_ERROR,
                  'Message': 'Problem with saving package.json'
                }];
                return _context3.abrupt("return", Promise.reject(this.result));

              case 30:
                this.result = [{
                  'Status': CliStatus.SUCCESS,
                  'Message': "Project name has been successfully changed from ".concat(this.oldName, " to ").concat(this.newName, ".")
                }];

              case 31:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[2, 13], [21, 26]]);
      }));

      function setName() {
        return _setName.apply(this, arguments);
      }

      return setName;
    }()
  }, {
    key: "handleMissingPackageJson",
    value: function handleMissingPackageJson() {
      var _this = this;

      return this.loadPackageManager().then(function () {
        return helpers.createPackageJson(_this.packageManager, _this.cwd);
      }).then(function (msg) {
        return _this.result.push(msg);
      }).then(function () {
        return _this.setName();
      })["catch"](function (err) {
        _this.result.push(err);

        _this.result.push({
          'Status': CliStatus.ERROR,
          'Message': 'Missing package.json file.'
        });

        console.table(_this.result);
        process.exit(1);
      });
    }
  }, {
    key: "saveInConfigFile",
    value: function () {
      var _saveInConfigFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
        var mdbFilePath, mdbFileContent;
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                mdbFilePath = path.join(this.cwd, '.mdb');
                mdbFileContent = {};
                _context4.prev = 2;
                _context4.next = 5;
                return helpers.deserializeJsonFile(mdbFilePath);

              case 5:
                mdbFileContent = _context4.sent;
                mdbFileContent.name = this.newName;
                _context4.next = 14;
                break;

              case 9:
                _context4.prev = 9;
                _context4.t0 = _context4["catch"](2);

                if (!(_context4.t0.code !== 'ENOENT')) {
                  _context4.next = 13;
                  break;
                }

                return _context4.abrupt("return", Promise.reject([{
                  Status: CliStatus.CLI_ERROR,
                  Message: 'Problem with `.mdb` file deserialization.'
                }]));

              case 13:
                mdbFileContent.name = this.newName;

              case 14:
                _context4.prev = 14;
                _context4.next = 17;
                return helpers.serializeJsonFile(mdbFilePath, mdbFileContent);

              case 17:
                _context4.next = 24;
                break;

              case 19:
                _context4.prev = 19;
                _context4.t1 = _context4["catch"](14);

                if (!(_context4.t1.code !== 'ENOENT')) {
                  _context4.next = 23;
                  break;
                }

                return _context4.abrupt("return", Promise.reject([{
                  Status: CliStatus.CLI_ERROR,
                  Message: 'Problem with `.mdb` file serialization.'
                }]));

              case 23:
                fs.writeFileSync(mdbFilePath, mdbFileContent, 'utf8');

              case 24:
                this.result = [{
                  Status: CliStatus.SUCCESS,
                  Message: 'Project name has been saved in .mdb file'
                }];

              case 25:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[2, 9], [14, 19]]);
      }));

      function saveInConfigFile() {
        return _saveInConfigFile.apply(this, arguments);
      }

      return saveInConfigFile;
    }()
  }, {
    key: "removeProject",
    value: function removeProject() {
      var options = {
        method: 'DELETE',
        port: config.port,
        hostname: config.host,
        path: "/project/unpublish/".concat(this.oldName),
        headers: this.authHandler.headers
      };
      var http = new HttpWrapper(options);
      return http["delete"]();
    }
  }]);

  return SetNameHandler;
}();

module.exports = SetNameHandler;