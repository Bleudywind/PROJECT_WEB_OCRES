'use strict';

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var HttpWrapper = require('../utils/http-wrapper');

var CliStatus = require('../models/cli-status');

var AuthHandler = require('./auth-handler');

var helpers = require('../helpers');

var config = require('../config');

var RegisterHandler = /*#__PURE__*/function () {
  function RegisterHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler(false);

    _classCallCheck(this, RegisterHandler);

    this.result = [];
    this.options = {
      port: config.port,
      hostname: config.host,
      path: '/auth/register',
      method: 'POST',
      data: '',
      headers: {
        'Content-Type': 'application/json'
      }
    };
    this.authHandler = authHandler;
  }

  _createClass(RegisterHandler, [{
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }, {
    key: "askCredentials",
    value: function () {
      var _askCredentials = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var prompt, passwordValue, answers;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                prompt = require('inquirer').createPromptModule();
                _context.next = 3;
                return prompt([{
                  type: 'text',
                  message: 'Enter your name',
                  name: 'name',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && /^[^()!|&*]+$/.test(value);
                    /* istanbul ignore next */

                    return valid || 'Name is invalid.';
                  }
                }, {
                  type: 'text',
                  message: 'Enter username',
                  name: 'username',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && /^[^()!|&*]+$/.test(value);
                    /* istanbul ignore next */

                    return valid || 'Username is invalid.';
                  }
                }, {
                  type: 'text',
                  message: 'Enter email',
                  name: 'email',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/.test(value);
                    /* istanbul ignore next */

                    return valid || 'Please enter a valid email.';
                  }
                }, {
                  type: 'password',
                  message: 'Enter password',
                  name: 'password',
                  mask: '*',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && typeof value === 'string' && value.length > 7;
                    passwordValue = value;
                    /* istanbul ignore next */

                    return valid || 'Password is invalid, it should contain at least 8 characters.';
                  }
                }, {
                  type: 'password',
                  message: 'Repeat password',
                  name: 'repeatPassword',
                  mask: '*',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && typeof value === 'string' && value === passwordValue;
                    /* istanbul ignore next */

                    return valid || 'Passwords do not match.';
                  }
                }]);

              case 3:
                answers = _context.sent;
                this.options.data = JSON.stringify(answers);
                this.options.headers['Content-Length'] = Buffer.byteLength(this.options.data);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function askCredentials() {
        return _askCredentials.apply(this, arguments);
      }

      return askCredentials;
    }()
  }, {
    key: "register",
    value: function register() {
      var http = new HttpWrapper(this.options);
      return http.post();
    }
  }, {
    key: "parseResponse",
    value: function parseResponse(response) {
      response = typeof response === 'string' ? JSON.parse(response) : response;

      var _response = response,
          _response2 = _slicedToArray(_response, 1),
          _response2$ = _response2[0],
          token = _response2$.token,
          loggedin = _response2$.loggedin,
          message = _response2$.message;

      if (loggedin) {
        this.result = [{
          'Status': CliStatus.SUCCESS,
          'Message': 'Registration successful'
        }];
        this.saveToken(token);
      } else {
        this.result = [{
          'Status': CliStatus.ERROR,
          'Message': message
        }];
      }
    }
  }, {
    key: "saveToken",
    value: function saveToken(token) {
      try {
        var saved = helpers.saveToken(token);
        !saved && this.result.push({
          'Status': CliStatus.ERROR,
          'Message': 'Login failed'
        });
      } catch (e) {
        this.result.push({
          'Status': CliStatus.INTERNAL_SERVER_ERROR,
          'Message': "Login failed: ".concat(e.message)
        });
      }
    }
  }]);

  return RegisterHandler;
}();

module.exports = RegisterHandler;