'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var config = require('../config');

var inquirer = require('inquirer');

var AuthHandler = require('./auth-handler');

var CliStatus = require('../models/cli-status');

var HttpWrapper = require('../utils/http-wrapper');

var ProjectStatus = require('../models/project-status');

var KillHandler = /*#__PURE__*/function () {
  function KillHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler();

    _classCallCheck(this, KillHandler);

    this.result = [];
    this.projects = [];
    this.projectName = '';
    this.authHandler = authHandler;
    this.options = {
      port: config.port,
      hostname: config.host,
      path: '/project',
      headers: _objectSpread(_objectSpread({}, this.authHandler.headers), {}, {
        'Content-Type': 'application/json'
      })
    };
    this.remove = false;
    this.args = [];
    this.setAuthHeader();
  }

  _createClass(KillHandler, [{
    key: "setAuthHeader",
    value: function setAuthHeader() {
      this.result = this.authHandler.result;
      this.authHeaders = this.authHandler.headers;
    }
  }, {
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }, {
    key: "setArgs",
    value: function setArgs(args) {
      this.remove = args.some(function (arg) {
        return ['-rm', '--remove'].includes(arg);
      });
      this.args = args.filter(function (arg) {
        return !['-rm', '--remove'].includes(arg);
      });
    }
  }, {
    key: "fetchProjects",
    value: function () {
      var _fetchProjects = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var http, projects;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                http = new HttpWrapper(this.options);
                _context.next = 3;
                return http.get();

              case 3:
                projects = _context.sent;
                projects = typeof projects === 'string' ? JSON.parse(projects) : projects;
                this.projects = projects.filter(function (p) {
                  return p.status === ProjectStatus.BACKEND;
                }).map(function (p) {
                  return {
                    name: p.projectName
                  };
                });

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function fetchProjects() {
        return _fetchProjects.apply(this, arguments);
      }

      return fetchProjects;
    }()
  }, {
    key: "askForProjectName",
    value: function () {
      var _askForProjectName = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var select;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(this.projects.length === 0)) {
                  _context2.next = 2;
                  break;
                }

                return _context2.abrupt("return", Promise.reject([{
                  Status: CliStatus.NOT_FOUND,
                  Message: 'You do not have any backend projects yet.'
                }]));

              case 2:
                if (!(this.args.length > 0)) {
                  _context2.next = 5;
                  break;
                }

                this.projectName = this.args[0];
                return _context2.abrupt("return");

              case 5:
                _context2.next = 7;
                return inquirer.createPromptModule()([{
                  type: 'list',
                  name: 'name',
                  message: 'Choose project',
                  choices: this.projects
                }]);

              case 7:
                select = _context2.sent;
                this.projectName = select.name;

              case 9:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function askForProjectName() {
        return _askForProjectName.apply(this, arguments);
      }

      return askForProjectName;
    }()
  }, {
    key: "kill",
    value: function () {
      var _kill = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var killType, http, result;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                killType = this.remove ? 'rmkill' : 'kill';
                this.options.path = "/project/".concat(killType, "/").concat(this.projectName);
                http = new HttpWrapper(this.options);
                _context3.next = 5;
                return http["delete"]();

              case 5:
                result = _context3.sent;
                this.result = [{
                  Status: CliStatus.HTTP_SUCCESS,
                  Message: result
                }];

              case 7:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function kill() {
        return _kill.apply(this, arguments);
      }

      return kill;
    }()
  }]);

  return KillHandler;
}();

module.exports = KillHandler;