'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AuthHandler = require('./auth-handler');

var HttpWrapper = require('../utils/http-wrapper');

var ProjectStatus = require('../models/project-status');

var config = require('../config');

var ProjectsHandler = /*#__PURE__*/function () {
  function ProjectsHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler();

    _classCallCheck(this, ProjectsHandler);

    this.result = [];
    this.authHeaders = {};
    this.authHandler = authHandler;
    this.backend = false;
    this.setAuthHeader();
  }

  _createClass(ProjectsHandler, [{
    key: "setAuthHeader",
    value: function setAuthHeader() {
      this.result = this.authHandler.result;
      this.authHeaders = this.authHandler.headers;
    }
  }, {
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }, {
    key: "setArgs",
    value: function setArgs(args) {
      this.backend = args.some(function (arg) {
        return ['-b', '--backend'].includes(arg);
      });
    }
  }, {
    key: "fetchProjects",
    value: function () {
      var _fetchProjects = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var options, http, projects, backendProjects, frontendProjects;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                options = {
                  port: config.port,
                  hostname: config.host,
                  path: '/project',
                  data: '',
                  headers: this.authHeaders
                };
                http = new HttpWrapper(options);
                _context.next = 4;
                return http.get();

              case 4:
                projects = _context.sent;
                projects = typeof projects === 'string' ? JSON.parse(projects) : projects;

                if (!this.backend) {
                  _context.next = 13;
                  break;
                }

                backendProjects = projects.filter(function (p) {
                  return p.status === ProjectStatus.BACKEND;
                });

                if (!backendProjects.length) {
                  _context.next = 10;
                  break;
                }

                return _context.abrupt("return", this.result = backendProjects.map(function (p) {
                  var result = p.projectMeta.find(function (m) {
                    return m.metaKey === '_backend_technology';
                  });
                  var technology = result ? result.metaValue : undefined;
                  return {
                    'Project Name': p.projectName,
                    'Published': new Date(p.publishDate).toLocaleString(),
                    'Edited': new Date(p.editDate).toLocaleString(),
                    'Technology': technology,
                    'Repo': p.repoUrl ? p.repoUrl : '-'
                  };
                }));

              case 10:
                this.result = [{
                  Status: 0,
                  Message: 'You do not have any backend projects yet.'
                }];
                _context.next = 17;
                break;

              case 13:
                frontendProjects = projects.filter(function (p) {
                  return p.status !== ProjectStatus.BACKEND;
                });

                if (!frontendProjects.length) {
                  _context.next = 16;
                  break;
                }

                return _context.abrupt("return", this.result = frontendProjects.map(function (p) {
                  return {
                    'Project Name': p.projectName,
                    'Project URL': "https://".concat(config.projectsDomain, "/").concat(p.userNicename, "/").concat(p.projectName, "/"),
                    'Domain': p.domainName ? p.domainName : '-',
                    'Published': p.status === ProjectStatus.PUBLISHED ? new Date(p.publishDate).toLocaleString() : '-',
                    'Edited': new Date(p.editDate).toLocaleString(),
                    'Repo': p.repoUrl ? p.repoUrl : '-'
                  };
                }));

              case 16:
                this.result = [{
                  Status: 0,
                  Message: 'You do not have any projects yet.'
                }];

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function fetchProjects() {
        return _fetchProjects.apply(this, arguments);
      }

      return fetchProjects;
    }()
  }]);

  return ProjectsHandler;
}();

module.exports = ProjectsHandler;