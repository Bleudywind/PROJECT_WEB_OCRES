'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var config = require('../config');

var CliStatus = require('../models/cli-status');

var HttpWrapper = require('../utils/http-wrapper');

var AuthHandler = require('./auth-handler');

var helpers = require('../helpers');

var inquirer = require('inquirer');

var GetHandler = /*#__PURE__*/function () {
  function GetHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler();

    _classCallCheck(this, GetHandler);

    this.args = [];
    this.authHeaders = {};
    this.authHandler = authHandler;
    this.cwd = process.cwd();
    this.name = '';
    this.options = [];
    this.repoUrl = null;
    this.result = [];
    this.force = false;
    this.setAuthHeader();
  }

  _createClass(GetHandler, [{
    key: "setAuthHeader",
    value: function setAuthHeader() {
      this.authHeaders = this.authHandler.headers;
    }
  }, {
    key: "setArgs",
    value: function setArgs(args) {
      this.force = args.some(function (arg) {
        return arg === '--force';
      });
      this.args = args.filter(function (arg) {
        return arg !== '--force';
      });
    }
  }, {
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }, {
    key: "fetchProjects",
    value: function fetchProjects() {
      var _this = this;

      var options = {
        port: config.port,
        hostname: config.host,
        path: '/project',
        headers: this.authHeaders
      };
      var http = new HttpWrapper(options);
      return http.get().then(function (projects) {
        projects = typeof projects === 'string' ? JSON.parse(projects) : projects;
        _this.options = projects.map(function (p) {
          return {
            name: p.projectName,
            repoUrl: p.repoUrl
          };
        });
      });
    }
  }, {
    key: "askForProjectName",
    value: function askForProjectName() {
      var _this2 = this;

      if (this.options.length === 0) {
        return Promise.reject([{
          Status: CliStatus.NOT_FOUND,
          Message: 'You do not have any projects yet.'
        }]);
      }

      if (this.args.length > 0) {
        this.name = this.args[0];
        return Promise.resolve();
      }

      return inquirer.createPromptModule()([{
        type: 'list',
        name: 'name',
        message: 'Choose project',
        choices: this.options
      }]).then(function (select) {
        return _this2.name = select.name;
      });
    }
  }, {
    key: "getUserProject",
    value: function () {
      var _getUserProject = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var _this3 = this;

        var project;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                project = this.options.find(function (o) {
                  return o.name === _this3.name;
                });

                if (project) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return", Promise.reject([{
                  Status: CliStatus.NOT_FOUND,
                  Message: "Project ".concat(this.name, " does not exist.")
                }]));

              case 3:
                this.repoUrl = project.repoUrl;

                if (this.repoUrl) {
                  _context.next = 10;
                  break;
                }

                console.log('Downloading...');
                _context.next = 8;
                return helpers.downloadUserProject(this.name, this.authHeaders, this.cwd, this.force);

              case 8:
                this.result = _context.sent;
                return _context.abrupt("return");

              case 10:
                _context.next = 12;
                return helpers.gitClone(this.repoUrl);

              case 12:
                this.result = _context.sent;

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getUserProject() {
        return _getUserProject.apply(this, arguments);
      }

      return getUserProject;
    }()
  }]);

  return GetHandler;
}();

module.exports = GetHandler;