'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AuthHandler = require('./auth-handler');

var CliStatus = require('../models/cli-status');

var UnsetDomainNameHandler = /*#__PURE__*/function () {
  function UnsetDomainNameHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler();

    _classCallCheck(this, UnsetDomainNameHandler);

    this.result = [];
    this.authHandler = authHandler;
  }

  _createClass(UnsetDomainNameHandler, [{
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }, {
    key: "unsetDomainName",
    value: function unsetDomainName() {
      var _this = this;

      return new Promise(function (resolve, reject) {
        var fileName = 'package.json';

        var _require = require('../helpers/deserialize-object-from-file'),
            deserializeJsonFile = _require.deserializeJsonFile;

        deserializeJsonFile(fileName).then(function (fileContent) {
          if (!fileContent.domainName) {
            return reject([{
              'Status': CliStatus.NOT_FOUND,
              'Message': 'No domain name'
            }]);
          }

          delete fileContent.domainName;

          var _require2 = require('../helpers/serialize-object-to-file'),
              serializeJsonFile = _require2.serializeJsonFile;

          serializeJsonFile(fileName, fileContent).then(function () {
            _this.result = [{
              'Status': CliStatus.SUCCESS,
              'Message': 'Domain name has been deleted successfully'
            }];
            resolve();
          })["catch"](function (e) {
            console.log(e);
            reject([{
              'Status': CliStatus.INTERNAL_SERVER_ERROR,
              'Message': "Problem with saving ".concat(fileName)
            }]);
          });
        })["catch"](function (e) {
          console.log(e);
          reject([{
            'Status': CliStatus.INTERNAL_SERVER_ERROR,
            'Message': "Problem with reading ".concat(fileName)
          }]);
        });
      });
    }
  }]);

  return UnsetDomainNameHandler;
}();

module.exports = UnsetDomainNameHandler;