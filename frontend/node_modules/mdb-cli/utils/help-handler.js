'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AuthHandler = require('./auth-handler');

var HelpHandler = /*#__PURE__*/function () {
  function HelpHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler(false);

    _classCallCheck(this, HelpHandler);

    this.authHandler = authHandler;
  }

  _createClass(HelpHandler, [{
    key: "setResult",
    value: function setResult() {
      this.result = [{
        'Command': 'help',
        'Description': 'show this info'
      }, {
        'Command': 'login',
        'Description': 'log in to your MDB account'
      }, {
        'Command': 'logout',
        'Description': 'logout from cli'
      }, {
        'Command': 'register',
        'Description': 'create MDB account'
      }, {
        'Command': 'create',
        'Description': 'create new project on GitLab'
      }, {
        'Command': 'get',
        'Description': 'get your project from GitLab'
      }, {
        'Command': 'list',
        'Description': 'list available packages'
      }, {
        'Command': 'orders',
        'Description': 'list all your orders'
      }, {
        'Command': 'init',
        'Description': 'initialize chosen package'
      }, {
        'Command': 'publish',
        'Description': 'publish your project'
      }, {
        'Command': 'unpublish',
        'Description': 'remove your project from the public server'
      }, {
        'Command': 'set-name',
        'Description': 'change your project name'
      }, {
        'Command': 'rename',
        'Description': 'change your project name and update name on the public server'
      }, {
        'Command': 'projects',
        'Description': 'list all your published projects'
      }, {
        'Command': 'set-domain-name',
        'Description': 'set the domain name for your project'
      }, {
        'Command': 'unset-domain-name',
        'Description': 'remove the domain name from this project'
      }, {
        'Command': 'update',
        'Description': 'update mdb-cli to the latest version'
      }, {
        'Command': 'version (-v)',
        'Description': 'print mdb-cli version'
      }, {
        'Command': 'kill',
        'Description': 'kill backend project'
      }, {
        'Command': 'info',
        'Description': 'print info about backend project'
      }, {
        'Command': 'logs',
        'Description': 'print backend project logs'
      }, {
        'Command': 'db-list',
        'Description': 'list all your databases'
      }, {
        'Command': 'db-info',
        'Description': 'print database connection string'
      }, {
        'Command': 'db-create',
        'Description': 'create new database'
      }, {
        'Command': 'db-delete',
        'Description': 'delete database and database user'
      }];
    }
  }, {
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }]);

  return HelpHandler;
}();

module.exports = HelpHandler;