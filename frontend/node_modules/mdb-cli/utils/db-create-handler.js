'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var config = require('../config');

var inquirer = require('inquirer');

var helpers = require('../helpers');

var CliStatus = require('../models/cli-status');

var AuthHandler = require('./auth-handler');

var HttpWrapper = require('../utils/http-wrapper');

var DbCreateHandler = /*#__PURE__*/function () {
  function DbCreateHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler();

    _classCallCheck(this, DbCreateHandler);

    this.authHandler = authHandler;
    this.database = undefined;
    this.dbName = null;
    this.options = {
      port: config.port,
      hostname: config.host,
      path: '/databases',
      headers: _objectSpread(_objectSpread({}, this.authHandler.headers), {}, {
        'Content-Type': 'application/json'
      })
    };
    this.result = [];
  }

  _createClass(DbCreateHandler, [{
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }, {
    key: "setArgs",
    value: function () {
      var _setArgs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(args) {
        var index, database, select;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                index = args.indexOf('--database');
                database = args.find(function (arg) {
                  return ['--database'].includes(arg.split('=')[0]);
                });

                if (index !== -1 && args.length > index + 1) {
                  this.database = args[index + 1];
                } else if (database) {
                  this.database = database.split('=')[1];
                }

                if (config.databases.includes(this.database)) {
                  _context.next = 8;
                  break;
                }

                _context.next = 6;
                return inquirer.createPromptModule()([{
                  type: 'list',
                  name: 'name',
                  message: 'Choose database',
                  choices: config.databases
                }]);

              case 6:
                select = _context.sent;
                this.database = select.name;

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function setArgs(_x) {
        return _setArgs.apply(this, arguments);
      }

      return setArgs;
    }()
  }, {
    key: "askCredentials",
    value: function () {
      var _askCredentials = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var confirmed, prompt, passwordValue, answers;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return helpers.showConfirmationPrompt('In order to create a new database, you need to create the database user. Proceed?', true);

              case 2:
                confirmed = _context2.sent;

                if (confirmed) {
                  _context2.next = 5;
                  break;
                }

                return _context2.abrupt("return", Promise.reject({
                  Status: CliStatus.CLI_ERROR,
                  Message: 'OK, we will not create a database user.'
                }));

              case 5:
                prompt = inquirer.createPromptModule();
                _context2.next = 8;
                return prompt([{
                  type: 'text',
                  message: 'Enter username',
                  name: 'username',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && /^[a-z0-9_]+$/.test(value);
                    /* istanbul ignore next */

                    return valid || 'Username is invalid.';
                  }
                }, {
                  type: 'password',
                  message: 'Enter password',
                  name: 'password',
                  mask: '*',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*(\W|_)).{8,}$/.test(value);
                    passwordValue = value;
                    /* istanbul ignore next */

                    return valid || 'Password is incorrect, it should contain at least one uppercase letter, at least one lowercase letter, at least one number, at least one special symbol and it should contain more than 7 characters.';
                  }
                }, {
                  type: 'password',
                  message: 'Repeat password',
                  name: 'repeatPassword',
                  mask: '*',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && typeof value === 'string' && value === passwordValue;
                    /* istanbul ignore next */

                    return valid || 'Passwords do not match.';
                  }
                }, {
                  type: 'text',
                  message: 'Enter database name',
                  name: 'name',
                  validate: function validate(value) {
                    /* istanbul ignore next */
                    var valid = Boolean(value) && /^[a-z0-9_]+$/.test(value);
                    /* istanbul ignore next */

                    return valid || 'Database name is invalid.';
                  }
                }, {
                  type: 'text',
                  message: 'Enter description',
                  name: 'description'
                }]);

              case 8:
                answers = _context2.sent;
                answers.database = this.database;
                this.options.data = JSON.stringify(answers);
                this.options.headers['Content-Length'] = Buffer.byteLength(this.options.data);

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function askCredentials() {
        return _askCredentials.apply(this, arguments);
      }

      return askCredentials;
    }()
  }, {
    key: "createDatabase",
    value: function () {
      var _createDatabase = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var http, response, mysqlMsg, mongoMsg, msg;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                http = new HttpWrapper(this.options);
                _context3.next = 3;
                return http.post();

              case 3:
                response = _context3.sent;
                response = typeof response === 'string' ? JSON.parse(response) : response;
                this.result = [{
                  'Username': response.username,
                  'Password': response.password,
                  'Database Name': response.name,
                  'Connection String': response.connectionString
                }];
                mysqlMsg = "You can manage your database with phpMyAdmin at https://phpmyadmin.mdbgo.com/";
                mongoMsg = "To connect to this database you need to download Robo3T or another MongoDB client";
                msg = response.database === 'mysql8' ? mysqlMsg : mongoMsg;
                console.log('\n\x1b[33m%s\x1b[0m', ' Warning!', "Write down the password to your database as we will never show it again.\n");
                console.log('\n\x1b[34m%s\x1b[0m', ' Info:', "".concat(msg, "\n"));

              case 11:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function createDatabase() {
        return _createDatabase.apply(this, arguments);
      }

      return createDatabase;
    }()
  }]);

  return DbCreateHandler;
}();

module.exports = DbCreateHandler;