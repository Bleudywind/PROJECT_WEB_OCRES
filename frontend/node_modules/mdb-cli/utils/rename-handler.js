'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var config = require('../config');

var AuthHandler = require('./auth-handler');

var HttpWrapper = require('../utils/http-wrapper');

var ProjectStatus = require('../models/project-status');

var CliStatus = require('../models/cli-status');

var inquirer = require('inquirer');

var RenameHandler = /*#__PURE__*/function () {
  function RenameHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler();

    _classCallCheck(this, RenameHandler);

    this.result = [];
    this.authHandler = authHandler;
    this.backend = false;
    this.technology = undefined;
    this.options = {
      port: config.port,
      hostname: config.host,
      path: '/project',
      headers: this.authHandler.headers
    };
    this.projects = [];
    this.oldName = '';
    this.newName = '';
  }

  _createClass(RenameHandler, [{
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }, {
    key: "fetchProjects",
    value: function () {
      var _fetchProjects = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var http, projects;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                http = new HttpWrapper(this.options);
                _context.next = 3;
                return http.get();

              case 3:
                projects = _context.sent;
                this.projects = typeof projects === 'string' ? JSON.parse(projects) : projects;

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function fetchProjects() {
        return _fetchProjects.apply(this, arguments);
      }

      return fetchProjects;
    }()
  }, {
    key: "checkProjectStatus",
    value: function () {
      var _checkProjectStatus = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var _this = this;

        var projectToRename, projectExists, result;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                projectToRename = this.projects.find(function (p) {
                  return p.projectName === _this.oldName;
                });

                if (projectToRename) {
                  _context2.next = 3;
                  break;
                }

                return _context2.abrupt("return", Promise.reject({
                  Status: CliStatus.CLI_ERROR,
                  Message: "Project ".concat(this.oldName, " is not published yet.")
                }));

              case 3:
                projectExists = this.projects.some(function (p) {
                  return p.projectName === _this.newName;
                });

                if (!projectExists) {
                  _context2.next = 6;
                  break;
                }

                return _context2.abrupt("return", Promise.reject({
                  Status: CliStatus.CLI_ERROR,
                  Message: "Project ".concat(this.newName, " is already published. Please choose a different name")
                }));

              case 6:
                if (projectToRename.status === ProjectStatus.BACKEND) {
                  result = projectToRename.projectMeta.find(function (m) {
                    return m.metaKey === '_backend_technology';
                  });
                  this.technology = result ? result.metaValue : undefined;
                  this.backend = true;
                }

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function checkProjectStatus() {
        return _checkProjectStatus.apply(this, arguments);
      }

      return checkProjectStatus;
    }()
  }, {
    key: "getBackendTechnology",
    value: function () {
      var _getBackendTechnology = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var choices, select;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!(this.backend && !this.technology)) {
                  _context3.next = 6;
                  break;
                }

                choices = config.backendTechnologies.map(function (technology) {
                  return {
                    name: technology
                  };
                });
                _context3.next = 4;
                return inquirer.createPromptModule()([{
                  type: 'list',
                  name: 'name',
                  message: 'Select technology',
                  choices: choices
                }]);

              case 4:
                select = _context3.sent;
                this.technology = select.name;

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function getBackendTechnology() {
        return _getBackendTechnology.apply(this, arguments);
      }

      return getBackendTechnology;
    }()
  }]);

  return RenameHandler;
}();

module.exports = RenameHandler;