'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var AuthHandler = require('./auth-handler');

var CliStatus = require('../models/cli-status');

var helpers = require('../helpers/');

var path = require('path');

var fs = require('fs');

var SetDomainNameHandler = /*#__PURE__*/function () {
  function SetDomainNameHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler();

    _classCallCheck(this, SetDomainNameHandler);

    this.args = [];
    this.cwd = process.cwd();
    this.domainName = '';
    this.result = [];
    this.authHandler = authHandler;
  }

  _createClass(SetDomainNameHandler, [{
    key: "setArgs",
    value: function setArgs(args) {
      this.args = args;
    }
  }, {
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }, {
    key: "askForDomainName",
    value: function () {
      var _askForDomainName = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!(this.args.length > 0)) {
                  _context.next = 3;
                  break;
                }

                this.domainName = this.args[0];
                return _context.abrupt("return");

              case 3:
                _context.next = 5;
                return helpers.showTextPrompt('Enter domain name', 'Domain name must not be empty.');

              case 5:
                this.domainName = _context.sent;

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function askForDomainName() {
        return _askForDomainName.apply(this, arguments);
      }

      return askForDomainName;
    }()
  }, {
    key: "setDomainName",
    value: function () {
      var _setDomainName = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var packageJsonPath, packageJson, indexPhpPath;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                packageJsonPath = path.join(this.cwd, 'package.json');
                packageJson = {};
                _context2.prev = 2;
                _context2.next = 5;
                return helpers.deserializeJsonFile(packageJsonPath);

              case 5:
                packageJson = _context2.sent;
                _context2.next = 16;
                break;

              case 8:
                _context2.prev = 8;
                _context2.t0 = _context2["catch"](2);

                if (!(_context2.t0.code === 'ENOENT')) {
                  _context2.next = 15;
                  break;
                }

                indexPhpPath = path.join(this.cwd, 'index.php');

                if (!fs.existsSync(indexPhpPath)) {
                  _context2.next = 14;
                  break;
                }

                return _context2.abrupt("return", this.saveInConfigFile());

              case 14:
                return _context2.abrupt("return", this.handleMissingPackageJson());

              case 15:
                return _context2.abrupt("return", Promise.reject([{
                  Status: CliStatus.CLI_ERROR,
                  Message: 'Could not read `package.json` file.'
                }]));

              case 16:
                this.oldName = packageJson.domainName;

                if (!(this.domainName === this.oldName)) {
                  _context2.next = 19;
                  break;
                }

                return _context2.abrupt("return", Promise.reject([{
                  Status: CliStatus.SUCCESS,
                  Message: 'Domain names are the same.'
                }]));

              case 19:
                packageJson.domainName = this.domainName;
                _context2.prev = 20;
                _context2.next = 23;
                return helpers.serializeJsonFile(packageJsonPath, packageJson);

              case 23:
                _context2.next = 28;
                break;

              case 25:
                _context2.prev = 25;
                _context2.t1 = _context2["catch"](20);
                return _context2.abrupt("return", Promise.reject([{
                  Status: CliStatus.CLI_ERROR,
                  Message: 'Could not save `package.json` file.'
                }]));

              case 28:
                this.result = [{
                  Status: CliStatus.SUCCESS,
                  Message: 'Domain name has been saved in package.json file'
                }];

              case 29:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[2, 8], [20, 25]]);
      }));

      function setDomainName() {
        return _setDomainName.apply(this, arguments);
      }

      return setDomainName;
    }()
  }, {
    key: "handleMissingPackageJson",
    value: function handleMissingPackageJson() {
      var _this = this;

      return helpers.createPackageJson(null, this.cwd).then(function () {
        return _this.setDomainName();
      });
    }
  }, {
    key: "saveInConfigFile",
    value: function () {
      var _saveInConfigFile = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var mdbFilePath, mdbFileContent;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                mdbFilePath = path.join(this.cwd, '.mdb');
                mdbFileContent = {};
                _context3.prev = 2;
                _context3.next = 5;
                return helpers.deserializeJsonFile(mdbFilePath);

              case 5:
                mdbFileContent = _context3.sent;
                mdbFileContent.domainName = this.domainName;
                _context3.next = 14;
                break;

              case 9:
                _context3.prev = 9;
                _context3.t0 = _context3["catch"](2);

                if (!(_context3.t0.code !== 'ENOENT')) {
                  _context3.next = 13;
                  break;
                }

                return _context3.abrupt("return", Promise.reject([{
                  Status: CliStatus.CLI_ERROR,
                  Message: 'Could not read `.mdb` file.'
                }]));

              case 13:
                mdbFileContent.domainName = this.domainName;

              case 14:
                _context3.prev = 14;
                _context3.next = 17;
                return helpers.serializeJsonFile(mdbFilePath, mdbFileContent);

              case 17:
                _context3.next = 24;
                break;

              case 19:
                _context3.prev = 19;
                _context3.t1 = _context3["catch"](14);

                if (!(_context3.t1.code !== 'ENOENT')) {
                  _context3.next = 23;
                  break;
                }

                return _context3.abrupt("return", Promise.reject([{
                  Status: CliStatus.CLI_ERROR,
                  Message: 'Could not save `.mdb` file.'
                }]));

              case 23:
                fs.writeFileSync(mdbFilePath, mdbFileContent, 'utf8');

              case 24:
                this.result = [{
                  Status: CliStatus.SUCCESS,
                  Message: 'Domain name has been saved in .mdb file'
                }];

              case 25:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[2, 9], [14, 19]]);
      }));

      function saveInConfigFile() {
        return _saveInConfigFile.apply(this, arguments);
      }

      return saveInConfigFile;
    }()
  }]);

  return SetDomainNameHandler;
}();

module.exports = SetDomainNameHandler;