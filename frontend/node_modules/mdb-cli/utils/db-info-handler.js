'use strict';

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var config = require('../config');

var inquirer = require('inquirer');

var CliStatus = require('../models/cli-status');

var AuthHandler = require('./auth-handler');

var HttpWrapper = require('../utils/http-wrapper');

var DbInfoHandler = /*#__PURE__*/function () {
  function DbInfoHandler() {
    var authHandler = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new AuthHandler();

    _classCallCheck(this, DbInfoHandler);

    this.authHandler = authHandler;
    this.databases = [];
    this.dbName = null;
    this.options = {
      port: config.port,
      hostname: config.host,
      path: '/databases',
      headers: this.authHandler.headers
    };
    this.result = [];
    this.args = [];
  }

  _createClass(DbInfoHandler, [{
    key: "getResult",
    value: function getResult() {
      return this.result;
    }
  }, {
    key: "setArgs",
    value: function setArgs(args) {
      this.args = args;
    }
  }, {
    key: "fetchDatabases",
    value: function () {
      var _fetchDatabases = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var http, databases;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                http = new HttpWrapper(this.options);
                _context.next = 3;
                return http.get();

              case 3:
                databases = _context.sent;
                this.databases = typeof databases === 'string' ? JSON.parse(databases) : databases;

                if (!(this.databases.length === 0)) {
                  _context.next = 7;
                  break;
                }

                return _context.abrupt("return", Promise.reject([{
                  Status: CliStatus.SUCCESS,
                  Message: 'You do not have any databases yet.'
                }]));

              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function fetchDatabases() {
        return _fetchDatabases.apply(this, arguments);
      }

      return fetchDatabases;
    }()
  }, {
    key: "askForDbName",
    value: function () {
      var _askForDbName = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var select;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!(this.args.length > 0)) {
                  _context2.next = 3;
                  break;
                }

                this.dbName = this.args[0];
                return _context2.abrupt("return");

              case 3:
                _context2.next = 5;
                return inquirer.createPromptModule()([{
                  type: 'list',
                  name: 'name',
                  message: 'Choose database',
                  choices: this.databases
                }]);

              case 5:
                select = _context2.sent;
                this.dbName = select.name;

              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function askForDbName() {
        return _askForDbName.apply(this, arguments);
      }

      return askForDbName;
    }()
  }, {
    key: "setResult",
    value: function () {
      var _setResult = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        var _this = this;

        var database;
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                database = this.databases.find(function (db) {
                  return db.name === _this.dbName;
                });

                if (database) {
                  _context3.next = 3;
                  break;
                }

                return _context3.abrupt("return", Promise.reject({
                  Status: CliStatus.NOT_FOUND,
                  Message: 'Database not found.'
                }));

              case 3:
                this.result.push({
                  'Connection String': database.connectionString
                });
                console.log('\n\x1b[34m%s\x1b[0m', ' Info:', 'The connection string below does not show the password for your database user. You have to replace the \'<password>\' string with your real password in order to connect to the database.\n');

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function setResult() {
        return _setResult.apply(this, arguments);
      }

      return setResult;
    }()
  }]);

  return DbInfoHandler;
}();

module.exports = DbInfoHandler;